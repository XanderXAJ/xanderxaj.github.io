<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Help on Forged Defiance</title>
    <link>/categories/help/</link>
    <description>Recent content in Help on Forged Defiance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 09 Oct 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/help/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Getting battery life back on an Acer Aspire 5820TG running Windows 10</title>
      <link>/post/getting-battery-life-back-on-an-acer-aspire-5820tg-running-windows-10/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/getting-battery-life-back-on-an-acer-aspire-5820tg-running-windows-10/</guid>
      <description>Details upfront: My workaround is to completely disable the AMD GPU via a modded BIOS and let Windows Update install a valid driver for the Intel card. If this concerns you, then don&amp;rsquo;t follow the instructions on this page!
==Disclaimer: I can&amp;rsquo;t be held responsible should things go wrong etc. etc. I can only describe what worked for me.==
I&amp;rsquo;ll be careful. Instructions please! I first made sure that I had uninstalled all of the graphics drivers. I would do this by uninstalling the drivers (either via Device Manager or Programs &amp;amp; Features), rebooting in to Safe Mode (hold Shift while clicking Restart in the Start Menu, then find the Advanced Boot Options command) and using something like Driver Fusion to eradicate the AMD and Intel drivers.
I installed the modded BIOS available on Notebook Review&amp;rsquo;s forum. That same page also has some useful instructions should things go wrong!
I then rebooted in to the BIOS and set the graphics mode to the newly-added Integrated. Note that if you shut down Windows 10 it will still seem to flag to the BIOS that it is hibernating (likely one of the many ways Microsoft have sped up boot times), which means you can&amp;rsquo;t access the BIOS; I&amp;rsquo;ve found that restarting always gives me the option.
I then reboot to Windows, check Device Manager to see that only one graphics device shows up (on the Acer 5820TG, if the AMD GPU is enabled you&amp;rsquo;ll see 2 devices), then go to Start &amp;gt; Settings &amp;gt; Update &amp;gt; Check for Updates. Windows 10 will, in short order, get to installing the Intel driver (assuming you haven&amp;rsquo;t disabled it!).
My personal testing suggests that this is about as good as when you would have normally switched to Integrated graphics, which is good. BatteryBar Pro tells me that when the laptop is idle with WiFi on and the screen on the battery discharge rate in the 7,000-8,000mW region, which is excellent for this machine.
Why remove the AMD card entirely? In Windows 10 Microsoft have made the decision to automatically install the most up-to-date drivers it has for all the hardware connected to your machine.
It&amp;rsquo;s noble, but the problem here is that the up-to-date driver for the graphics cards in this machine doesn&amp;rsquo;t properly utilise switching. It instead uses both GPUs all the time &amp;mdash; leading to lacklustre battery life. So I would install a much older driver that I know works (and still behaves correctly in Windows 10) instead.
However, there is no easy way to opt-out of driver updated. The option in System to tell Windows Update to not install drivers is ignored. The only way I know of to stop the updates is to hide them before they&amp;rsquo;re installed by using a troubleshooter explicitly for this purpose; indeed, the functionality to disable updates is no longer built in to Windows. At least you can store the troubleshooter somewhere and keep running it to pretend the functionality is still there.
But there was a hitch: even once I&amp;rsquo;d hidden the AMD graphics driver update, it was still getting installed sooner or later.
I also found that so long as I stuck exclusively with the Intel card then everything was OK and Windows could not detect the AMD hardware. But as soon as I switched to the AMD GPU (such as can automatically happen when you connect a power supply), it effectively enabled a kill switch for the graphics driver in Windows as it&amp;rsquo;ll sooner or later install the up-to-date driver against my wishes.
I figured that it would just be a whole lot simpler to run with the one GPU and bypass the switchable business. The default BIOS lets you choose between Discrete and Switchable configurations, but I wanted an Integrated option. That&amp;rsquo;s where the modded BIOS came in.
But I don&amp;rsquo;t want to lose my AMD card! I might revisit this at some point, because while figuring all this stuff out I noticed something odd.
I went the one GPU route because I found that, despite disabling the update, the AMD graphics driver would still install. Except it might not have been the AMD graphics driver that was installing.
Once I had disabled the AMD GPU and rebooted, I noted that another option appeared in the disable update troubleshooter: the AMD HDMI audio driver.
I had already noted by this point that despite the fact that something would install and hose the driver, the driver version reported in Device Manager would not always change. This could be quite neatly explained if the HDMI audio driver, which wouldn&amp;rsquo;t change the graphics driver version, had enough stuff in it to stop the graphics driver working.
Now that I&amp;rsquo;ve disabled both the AMD graphics driver and the AMD HDMI audio driver, perhaps I could re-enable the switchable graphics configuration.
One last note: assuming that hiding updates works in Windows 10 like it did in previous Windows releases, then hiding an update only hides that version. That means that if either driver were to get updated in future, you&amp;rsquo;ll probably have to go through the entire rigmarole again (hide update, uninstall, reinstall) to get a working driver again.</description>
    </item>
    
    <item>
      <title>Troubleshooting keyboard shortcuts in Sublime Text</title>
      <link>/post/troubleshooting-keyboard-shortcuts-in-sublime-text/</link>
      <pubDate>Thu, 08 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/troubleshooting-keyboard-shortcuts-in-sublime-text/</guid>
      <description>I recently installed a couple of new plugins to Sublime Text, and then Ctrl+Shift+R, the shortcut for searching through all symbols in a project, stopped working!
You can get Sublime Text to display what&amp;rsquo;s actually going on when you press the shortcut &amp;mdash; that information may give you a hint as to what plugin or configuration has changed your value.
Is the shortcut reaching Sublime? The following commands are run in the Sublime Text Console; you can access on Linux and Windows by pressing Ctrl+`.
You can check the shortcut is actually managing to get to Sublime in the first place:
sublime.log_input(True)  You&amp;rsquo;ll notice that the console will now display the keys that you press &amp;mdash; try pressing a keyboard shortcut too!
key evt: shift+control+r  If the console is showing your keystrokes correctly, then Sublime is receiving them loud and clear and the problem lies elsewhere.
What is Sublime doing when the shortcut is invoked? By running the following in the Sublime console, you&amp;rsquo;ll see what commands Sublime is running as you press keyboard shortcuts:
sublime.log_commands(True)  You&amp;rsquo;ll now note the command names appearing inside of the console. I got the following:
key evt: shift+control+r command: run_emmet_action {&amp;quot;action&amp;quot;: &amp;quot;reflect_css_value&amp;quot;}  In my case, it turned out that Emmet had taken over the shortcut! I got my shortcut back by copying the default Ctrl+Shift+R shortcut definition from Preferences &amp;gt; Keybindings - Default and pasting it in to the user file at Preferences &amp;gt; Keybindings - User.
[ { &amp;quot;keys&amp;quot;: [&amp;quot;ctrl+shift+r&amp;quot;], &amp;quot;command&amp;quot;: &amp;quot;goto_symbol_in_project&amp;quot; } ]  I feel there should be a better way to do this, but this works as Sublime is now. Now I try the shortcut again:
key evt: shift+control+r command: goto_symbol_in_project  Much better.
Emmet has its own special shortcut handling Those of you familiar with Emmet might know that it has its own built-in mechanism to disable keyboard shortcuts of your choice. And in this case, that&amp;rsquo;s exactly what could be used.
&amp;quot;disabled_keymap_actions&amp;quot;: &amp;quot;reflect_css_value&amp;quot;  The nice thing about the keybindings override is that the instructions described above should work for any addon package as the User package is sourced last &amp;mdash; meaning that the User package overrides all.</description>
    </item>
    
  </channel>
</rss>