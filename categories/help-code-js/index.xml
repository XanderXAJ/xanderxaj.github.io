<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Help Code Js on Forged Defiance</title>
    <link>/categories/help-code-js/</link>
    <description>Recent content in Help Code Js on Forged Defiance</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sat, 07 Nov 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/help-code-js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript Promises Notes</title>
      <link>/post/javascript-promises-notes/</link>
      <pubDate>Sat, 07 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/javascript-promises-notes/</guid>
      <description>Some notes to remind future me why Promises are pretty neat.
What do they give me?  They let you regain error handling for asynchronous operations. They let you avoid nested callbacks (and the pyramid indentation that comes with them).  Can I use them? They were initially formalised in the Promises/A+ specification, and have been officially adopted in to JavaScript with ES6.
They&amp;rsquo;ve been supported in all major browsers (except IE) for a while now. A polyfill exists for browsers that do not support them.
Any important details?  Promises can start executing the instant they have been instantiated. However, this does not strictly mean that they will be. If you call .then(success_function, failure_function) on a Promise, the appropriate function will not be called until a Promise has settled &amp;mdash; either fulfilled or rejected. Calling .catch() is equivalent to calling .then(null, function).  I need help visualising them Try Promisees &amp;mdash; it&amp;rsquo;ll visualise and animate the promise-y code you give it. You can also slow down the animation and record animated GIFs!</description>
    </item>
    
  </channel>
</rss>